openapi: 3.0.3
info:
  title: API for an e-commerce system
  description: 'API for managing users, orders and customer tickets'
  version: 1.0.0
servers:
  - url: https://api.ecommerce.com/v1
tags:
  - name: user
    description: Operations about users
  - name: order
    description: Operations about orders
  - name: ticket
    description: Operations about tickets
paths:
  /users:
    post:
      tags:
        - user
      summary: Add a new user to the e-commerce system
      description: Add a new user to the e-commerce system
      operationId: addUser
      requestBody:
        description: Create a new user in the e-commerce system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'          
            application/xml:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExceptionError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserExceptionError'
      security:
        - api_key: []
        - user_auth:
            - write:users
            - read:users
    get:
      tags:
        - user
      summary: Get all users
      description: Returns a user's list
      operationId: getUsers
      responses:
        '200':
          description: User profile found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserList'
      security:
        - api_key: []
        - user_auth:
            - write:users
            - read:users
  /users/{userId}:
    get:
      tags:
        - user
      summary: Find user by Id
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User profile found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFound'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserNotFound'
      security:
        - api_key: []
        - user_auth:
            - write:users
            - read:users
    put:
      tags:
        - user
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'          
            application/xml:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFound'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserNotFound'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExceptionError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserExceptionError'
      security:
        - api_key: []
        - user_auth:
            - write:users
            - read:users
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'          
            application/xml:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFound'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserNotFound'
      security:
        - api_key: []
        - user_auth:
            - write:users
            - read:users
  /users/{userId}/orders:
    get:
      tags:
        - user
      summary: Find user's orders of specific user
      description: Returns a order's list of the user
      operationId: getUserOrders
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderList'
      security:
        - api_key: []
  /users/{userId}/orders/{orderId}:
    get:
      tags:
        - user
      summary: Find specific user's order
      description: Returns a single order of specific user
      operationId: getUserOrderById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
      security:
        - api_key: []
  /users/{userId}/tickets:
    get:
      tags:
        - user
      summary: Find user's tickets of specific user
      description: Returns a ticket's list of the user
      operationId: getUserTickets
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketList'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TicketList'
      security:
        - api_key: []
  /users/{userId}/tickets/{ticketId}:
    get:
      tags:
        - user
      summary: Find specific user's ticket
      description: Returns a single order
      operationId: getUserTicketById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: ticketId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketNotFound'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TicketNotFound'
      security:
        - api_key: []
  /orders:
    post:
      tags:
        - order
      summary: Create new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'          
            application/xml:
              schema:
                $ref: '#/components/schemas/BadRequest'
      security:
        - api_key: []
    get:
      tags:
        - order
      summary: Get all orders
      description: Returns a order's list
      operationId: getOrders
      responses:
        '200':
          description: User profile found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'          
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderList'
      security:
        - api_key: []
  /orders/{orderId}:
    get:
      tags:
        - order
      summary: Find order by Id
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFound'          
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
      security:
        - api_key: []
  /tickets:
    post:
      tags:
        - ticket
      summary: Create a new support ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'          
            application/xml:
              schema:
                $ref: '#/components/schemas/BadRequest'
      security:
        - api_key: []
    get:
      tags:
        - ticket
      summary: Get all tickets
      description: Returns a tickets's list
      operationId: getTickets
      responses:
        '200':
          description: Tickets found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketList'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TicketList'
      security:
        - api_key: []
  /tickets/{ticketId}:
    get:
      tags:
        - ticket
      summary: Find ticket by Id
      description: Returns a single ticket
      operationId: getTicketById
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ticket found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketNotFound'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TicketNotFound'
      security:
        - api_key: []
components:
  schemas:
    BadRequest:
      type: object
      properties:
        errors:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BadRequestError'
      xml:
        name: errors
    BadRequestError:
      type: object
      properties:
        code:
          type: string
          example: bad_request
        message:
          type: string
          example: Petición errónea
    Order:
      required:
        - order_id
        - user_id
        - items
      type: object
      properties:
        order_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 7
        items:
          $ref: '#/components/schemas/ProductList'
        total_price:
          type: number
          example: 99.99
        shipping_address:
          type: string
          example: 123 Main St, City
        status:
          type: string
          description: user status
          enum:
            - pending
            - shipped
            - delivered
    OrderList:
      type: array
      xml:
        wrapped: true
      items:
        oneOf:
          - $ref: '#/components/schemas/Order'
    OrderError:
      type: object
      properties:
        code:
          type: string
          example: order_not_found
        message:
          type: string
          example: La orden no ha sido encontrada
    OrderNotFound:
      type: object
      properties:
        errors:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/OrderError'
      xml:
        name: errors
    ProductList:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/Product'
          - $ref: '#/components/schemas/SecondProduct'
    Product:
      type: object
      properties:
        product_id:
          type: integer
          example: 1000
        quantity:
          type: integer
          example: 1
        price:
          type: number
          example: 9.99
    SecondProduct:
      type: object
      properties:
        product_id:
          type: integer
          example: 1001
        quantity:
          type: integer
          example: 3
        price:
          type: number
          example: 30.00
    Ticket:
      required:
        - user_id
        - subject
        - description
        - status
      type: object
      properties:
        user_id:
          type: integer
          example: 7
        subject:
          type: string
          example: "Solicitud"
        description:
          type: string
          example: "Este es un ejemplo que describe la solicitud"
        status:
          type: string
          description: ticket status
          enum:
            - open
            - attending
            - closed
    TicketList:
      type: array
      xml:
        wrapped: true
      items:
        oneOf:
          - $ref: '#/components/schemas/Ticket'
    User:
      required:
        - username
        - firstname
        - lastname
        - email
        - mobile
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 7
        username:
          type: string
          example: davidmoreno
        firstname:
          type: string
          example: David
        lastname:
          type: string
          example: Moreno
        email:
          type: string
          example: david@test.com
        mobile:
          type: string
          example: +525512345678
        status:
          type: string
          description: user status
          enum:
            - available
            - audit
            - deleted
      xml:
        name: user
    UserList:
      type: array
      xml:
        wrapped: true
      items:
        oneOf:
          - $ref: '#/components/schemas/User'
    TicketError:
      type: object
      properties:
        code:
          type: string
          example: ticket_not_found
        message:
          type: string
          example: El ticket no ha sido encontrado
    TicketNotFound:
      type: object
      properties:
        errors:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TicketError'
      xml:
        name: errors
    UserEmailError:
      type: object
      properties:
        code:
          type: string
          example: user_email_found
        message:
          type: string
          example: El email está duplicado
    UserError:
      type: object
      properties:
        code:
          type: string
          example: user_not_found
        message:
          type: string
          example: El usuario no ha sido encontrado
    UserExceptionError:
      type: object
      properties:
        errors:
          type: array
          xml:
            wrapped: true
          items:
            oneOf:
              - $ref: '#/components/schemas/UserMobileError'
              - $ref: '#/components/schemas/UserEmailError'
      xml:
        name: errors
    UserMobileError:
      type: object
      properties:
        code:
          type: string
          example: user_mobile_found
        message:
          type: string
          example: El teléfono está duplicado
    UserNotFound:
      type: object
      properties:
        errors:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UserError'
      xml:
        name: errors
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://users.swagger.io/oauth/authorize
          scopes:
            write:users: modify users
            read:users: read users
    api_key:
      type: apiKey
      name: api_key
      in: header