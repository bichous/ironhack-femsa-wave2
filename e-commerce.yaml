openapi: 3.0.1
info:
  title: E-commerce API
  description: API documentation for managing users and orders.
  version: "1.0.0"
servers:
  - url: /api/v1

paths:
  /users:
    get:
      summary: Retrieve all users
      responses:
        '200':
          description: Successful retrieval of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "200"
                      message:
                        type: string
                        example: "Successful retrieval"
                      timestamp:
                        type: string
                        format: date-time
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: Users not found
        '500':
          description: Internal server error

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid data
        '500':
          description: Internal server error

  /users/{id}:
    get:
      summary: Retrieve user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: Successful retrieval of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid data
        '404':
          description: User not found
        '500':
          description: Internal server error

  /orders:
    get:
      summary: Retrieve all orders
      responses:
        '200':
          description: Successful retrieval of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Orders not found
        '500':
          description: Internal server error

    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid data
        '500':
          description: Internal server error

  /orders/{id}:
    get:
      summary: Retrieve order by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Successful retrieval of order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2024-05-24T19:43:21.886Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-05-24T19:43:21.886Z"

    UserResponse:
      type: object
      properties:
        notifications:
          type: object
          properties:
            code:
              type: string
              example: "200"
            message:
              type: string
              example: "Successful retrieval"
            timestamp:
              type: string
              format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        itemName:
          type: string
          example: "Product A"
        quantity:
          type: integer
          example: 3
        price:
          type: number
          format: float
          example: 99.99
        createdAt:
          type: string
          format: date-time
          example: "2024-05-24T19:43:21.886Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-05-24T19:43:21.886Z"

    OrderResponse:
      type: object
      properties:
        notifications:
          type: object
          properties:
            code:
              type: string
              example: "200"
            message:
              type: string
              example: "Successful retrieval"
            timestamp:
              type: string
              format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
