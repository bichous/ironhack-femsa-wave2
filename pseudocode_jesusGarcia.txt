// Define interfaces for different responsibilities

// Interface for inventory verification
public interface IInventoryService
{
    void VerifyInventory(Order order);
}

// Interface for payment processing
public interface IPaymentService
{
    bool ProcessPayment(Order order);
}

// Interface for order status updates
public interface IOrderRepository
{
    void UpdateOrderStatus(int orderId, string status);
}

// Interface for customer notifications
public interface INotificationService
{
    void NotifyCustomer(string customerEmail, string message);
}

// Implement the services

// Implementation of inventory verification service
public class InventoryService : IInventoryService
{
    public void VerifyInventory(Order order)
    {
        // Checks inventory levels
        if (inventory < order.Quantity)
        {
            throw new Exception("Out of stock");
        }
    }
}

// Implementation of standard payment processing service
public class StandardPaymentService : IPaymentService
{
    public bool ProcessPayment(Order order)
    {
        // Handles standard payment processing
        return paymentService.Process(order.Amount);
    }
}

// Implementation of express payment processing service
public class ExpressPaymentService : IPaymentService
{
    public bool ProcessPayment(Order order)
    {
        // Handles express payment processing with high priority
        return expressPaymentService.Process(order.Amount, "highPriority");
    }
}

// Implementation of order repository for updating order status
public class OrderRepository : IOrderRepository
{
    public void UpdateOrderStatus(int orderId, string status)
    {
        // Updates the order status in the database
        database.UpdateOrderStatus(orderId, status);
    }
}

// Implementation of email notification service
public class EmailNotificationService : INotificationService
{
    public void NotifyCustomer(string customerEmail, string message)
    {
        // Sends an email notification to the customer
        emailService.SendEmail(customerEmail, message);
    }
}

// Refactor SystemManager to use dependency injection
public class SystemManager
{
    private readonly IInventoryService _inventoryService;
    private readonly IOrderRepository _orderRepository;
    private readonly INotificationService _notificationService;

    // Constructor to inject dependencies
    public SystemManager(IInventoryService inventoryService, IOrderRepository orderRepository, INotificationService notificationService)
    {
        _inventoryService = inventoryService;
        _orderRepository = orderRepository;
        _notificationService = notificationService;
    }

    // Method to process orders with a specified payment service
    public void ProcessOrder(Order order, IPaymentService paymentService)
    {
        // Verify inventory for the order
        _inventoryService.VerifyInventory(order);

        // Process payment for the order
        if (!paymentService.ProcessPayment(order))
        {
            throw new Exception("Payment failed");
        }

        // Update order status to 'processed'
        _orderRepository.UpdateOrderStatus(order.Id, "processed");

        // Notify customer that their order has been processed
        _notificationService.NotifyCustomer(order.CustomerEmail, "Your order has been processed.");
    }
}
